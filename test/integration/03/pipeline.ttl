@base         <urn:pipeline:bar> .
@prefix :     <https://pipeline.described.at/> .
@prefix code: <https://code.described.at/> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .


<inputCSV>
    :variable [ a  :Variable ;
                :name  "csvw" ;
                :value "test/integration/03/input/isil_lindas.csv" ] .

<mappings>
    :variable [ a  :Variable ;
                 :name  "glob" ;
                 :value "test/integration/03/mappings/*.json" ] .

<http://example.com/pipelines/main>
    a      :Pipeline ;
    :steps [ :stepList ( <#mergeInputs> <#streamOutputStep> ) ] .

<#mergeInputs>
    a                  :Step ;
    code:implementedBy [ code:link <node:barnard59-base/concat.js#object> ;
                         a         code:EcmaScriptModule ] ;
    code:arguments     ( <#TransformFiles> ) .

<#StreamOutput>
    a :Pipeline, :WritableObjectMode .

<#streamOutputStep>
    a                  :Step ;
    code:implementedBy [ code:link <file:lib/pipeline.js#asStep> ;
                         a         code:EcmaScriptModule ] ;
    code:arguments     ( <#StreamOutput> ) .

<#StreamOutput>
    :steps     [ :stepList ( _:serialize ) ] .

_:serialize
    a                  :Step ;
    code:implementedBy [ code:link <node:barnard59-formats/ntriples.js#serialize> ;
                         a         code:EcmaScriptModule ] .

# ------------------------------
#
# Transform pipeline
#
# One-by-one parses and transforms the source csv files to RDF
#
# ------------------------------

<#TransformFiles>
    a      :Pipeline, :ReadableObjectMode ;
    :variables <mappings> ;
    :steps [ :stepList ( <#loadMappings> <#doTransform> ) ] .

<#loadMappings>
    a                  :Step ;
    code:implementedBy [ code:link <node:barnard59-base/glob.js#default> ;
                         a         code:EcmaScriptModule ] ;
    code:arguments     [ code:name  "pattern" ;
                         code:value "glob"^^:VariableName ] .

<#doTransform>
    a                  :Step ;
    code:implementedBy [ code:link <node:barnard59-base/forEach.js#default> ;
                         a         code:EcmaScriptModule ] ;
    code:arguments     ( <#TransformCsv>
                         "csvw" ) .

# ------------------------------
#
# Transforms individual files
#
# ------------------------------

<#TransformCsv>
    a      :Pipeline, :ReadableObjectMode ;
    :steps [ :stepList ( <#loadCsvStep> <#parse> <#filterNotCsvw> ) ] .

<#LoadCsv>
    a      :Pipeline, :ReadableObjectMode ;
    :variables <inputCSV> ;
    :steps [ :stepList ( _:openCsvFromFilesystem ) ] .

_:openCsvFromFilesystem
    a                  :Step ;
    code:implementedBy [ code:link <file:lib/csv.js#openFromCsvw> ;
                         a         code:EcmaScriptModule ] ;
    code:arguments     ( "${csvw}"^^code:EcmaScriptTemplateLiteral ) .

<#loadCsvStep>
    a                  :Step ;
    code:implementedBy [ code:link <file:lib/pipeline.js#asStep> ;
                         a         code:EcmaScriptModule ] ;
    code:arguments     ( <#LoadCsv> ) .

<#parse>
    a                  :Step ;
    code:implementedBy [ code:link <node:barnard59-formats/csvw.js#parse> ;
                         a         code:EcmaScriptModule ] ;
    code:arguments     ( <#parseMetadata> ) .

<#parseMetadata>
    a      :Pipeline, :ReadableObjectMode ;
    :steps [ :stepList ( <#readMetadata> <#parseMetadataStep> ) ] .

<#parseMetadataStep>
    a                  :Step ;
    code:implementedBy [ code:link <node:barnard59-formats/jsonld.js#parse> ;
                         a         code:EcmaScriptModule ] .

<#readMetadata>
    a                  :Step ;
    code:implementedBy [ code:link <node:fs#createReadStream> ;
                         a         code:EcmaScriptModule ] ;
    code:arguments     ( "${csvw}"^^code:EcmaScriptTemplateLiteral ) .

<#filterNotCsvw>
    a                  :Step ;
    code:implementedBy [ a         code:EcmaScriptModule ;
                         code:link <node:barnard59-base/filter.js#default> ] ;
    code:arguments     ( [ code:link <file:lib/output-filter.js#removeCsvwTriples> ;
                           a         code:EcmaScriptModule ] ) .
